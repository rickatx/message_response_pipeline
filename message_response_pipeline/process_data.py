# AUTOGENERATED! DO NOT EDIT! File to edit: ETL_Pipeline_Preparation.ipynb (unless otherwise specified).

__all__ = ['load_data', 'clean_data', 'get_engine', 'save_data']

# Cell
import numpy as np
import pandas as pd
from sqlalchemy import create_engine
import sys

# Cell

def load_data(messages_filepath, categories_filepath):
    """Load message and category data from the specified filepaths.

    Args:
     - messages_filepath (str): path to messages csv file
     - categories_filepath (str): path to categories csv file

    Returns:
     - DataFrame of the two datasets, joined on 'id'.
    """
    messages = pd.read_csv(messages_filepath)
    categories = pd.read_csv(categories_filepath)
    return messages.merge(categories, on='id')

# Cell

def clean_data(df):
    """Clean the loaded messages and categories data.
     Convert 'categories' column string into a set of numeric columns, and remove duplicate rows.

     Arg:
      - df: DataFrame containing data loaded by load_data()

     Returns:
      - DataFrame of cleaned data.
     """
    # Categories are in a single string column; create a dataframe with a column for each category
    categories = df.categories.str.split(';', expand=True)

    # select the first row of the categories dataframe
    row = categories.iloc[0]
    # use this row to extract a list of new column names for categories.
    category_colnames = [s[:-2] for s in row]
    # rename the columns of `categories`
    categories.columns = category_colnames

    # convert category values to numbers
    for column in categories:
        # set each value to be the last character of the string
        categories[column] = categories[column].str[-1]

        # convert column from string to numeric
        categories[column] = categories[column].astype(int)

    # replace original category string values with numeric columns
    df = df.drop('categories', axis=1)

    # concatenate the original dataframe with the new `categories` dataframe
    df = df.join(categories)

    # remove duplicates
    return df.drop_duplicates()

# Cell

def get_engine(database_filename):
    """Return database engine given database filename."""
    return create_engine(f'sqlite:///{database_filename}')

def save_data(df, engine):
    """Save the specified DataFrame as table 'CategorizedMessages' to specified database `engine`."""
    with engine.connect() as connection:
        df.to_sql('CategorizedMessages', connection, index=False, if_exists='replace')

# Internal Cell

def main():
    if len(sys.argv) == 4:

        messages_filepath, categories_filepath, database_filepath = sys.argv[1:]

        print('Loading data...\n    MESSAGES: {}\n    CATEGORIES: {}'
              .format(messages_filepath, categories_filepath))
        df = load_data(messages_filepath, categories_filepath)

        print('Cleaning data...')
        df = clean_data(df)

        print('Saving data...\n    DATABASE: {}'.format(database_filepath))
        engine = get_engine(database_filepath)
        save_data(df, engine)

        print('Cleaned data saved to database!')

    else:
        print('Please provide the filepaths of the messages and categories '\
              'datasets as the first and second argument respectively, as '\
              'well as the filepath of the database to save the cleaned data '\
              'to as the third argument. \n\nExample: python process_data.py '\
              'disaster_messages.csv disaster_categories.csv '\
              'DisasterResponse.db')

# Run main() only when the generated python file is run as a script
# IN_TEST environment variable is set during nbdev notebook test; do not execute during test
if __name__ == '__main__' and not os.environ.get('IN_TEST'):
    main()